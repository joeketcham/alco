use alco;

CREATE TABLE CUSTOMER_TYPE (
  ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  TYPE VARCHAR(250)
);

CREATE TABLE CUSTOMER (
  ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  FIRSTNAME VARCHAR(250),
  MI CHAR(1),
  LASTNAME VARCHAR(250),
  ADDRESS1 VARCHAR(250),
  ADDRESS2 VARCHAR(250),
  CITY VARCHAR(250),
  STATE VARCHAR(2),
  ZIP VARCHAR(9),
  PHONE1 VARCHAR(10),
  PHONE2 VARCHAR(10),
  EMAIL VARCHAR(250),
  NOTE TEXT,
  CUSTOMER_TYPE_ID BIGINT,
  FOREIGN KEY (CUSTOMER_TYPE_ID) REFERENCES CUSTOMER_TYPE(ID)
);

CREATE TABLE INVOICE (
  ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  DROPOFF DATETIME,
  READY DATETIME,
  NOTE TEXT,
  PAID BOOLEAN NOT NULL,
  TOTAL_PRICE NUMERIC(15,2),
  TOTAL_QUANTITY BIGINT(20),
  CUSTOMER_ID BIGINT,
  FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(ID)
);

CREATE TABLE ITEM_LINE (
  ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  ITEM_CATEGORY VARCHAR(250),
  ITEM VARCHAR(250),
  PRICE_OVERRIDE BOOLEAN NOT NULL,
  QUANTITY BIGINT,
  PRICE NUMERIC(15,2),
  INVOICE_ID BIGINT,
  FOREIGN KEY (INVOICE_ID) REFERENCES INVOICE(ID)
);

CREATE TABLE ITEM_LINE_UPCHARGE (
  ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  DESCRIPTION VARCHAR(250),
  PRICE NUMERIC(15,2),
  ITEM_LINE_ID BIGINT,
  FOREIGN KEY (ITEM_LINE_ID) REFERENCES ITEM_LINE(ID)
);

ALTER TABLE CUSTOMER_TYPE ADD UNIQUE (TYPE);
ALTER TABLE CATEGORY ADD UNIQUE (DESCRIPTION);



/*
-----------------------------------------------
CUT OFF IN SCHEMA FOR PERFORMANCE CONSIDERATION
ALSO CREATES SEPARATION FROM HISTORICAL DATA,
SO A CHANGE IN PRICE WILL NOT CHANGE WHAT WAS
CHARGED PREVIOUSLY!
-----------------------------------------------
 */

CREATE TABLE CATEGORY (
  ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  DESCRIPTION VARCHAR(250),
  CUSTOMER_TYPE_ID BIGINT,
  FOREIGN KEY (CUSTOMER_TYPE_ID) REFERENCES CUSTOMER_TYPE(ID)
);

CREATE TABLE ITEM (
  ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  DESCRIPTION VARCHAR(250),
  PRICE NUMERIC(15,2),
  CATEGORY_ID BIGINT,
  FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(ID),
  CUSTOMER_TYPE_ID BIGINT,
  FOREIGN KEY (CUSTOMER_TYPE_ID) REFERENCES CUSTOMER_TYPE(ID)
);

SELECT * FROM ITEM;
select * from ITEM_LINE_UPCHARGE;

CREATE TABLE UPCHARGE (
  ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  DESCRIPTION VARCHAR(250),
  PRICE NUMERIC(15,2)
);
INSERT INTO CUSTOMER_TYPE(TYPE)
VALUES('CARD');
select * from customer where CUSTOMER_TYPE_ID=1;
BEGIN;
INSERT INTO CUSTOMER_TYPE(TYPE)
VALUES('CARD');

INSERT INTO CUSTOMER(FIRSTNAME, MI, LASTNAME,ADDRESS1, ADDRESS2,CITY,STATE,
                     ZIP,PHONE1,PHONE2, EMAIL,NOTE,CUSTOMER_TYPE_ID)
VALUES('JOE', 'K', 'KETCHAM','210 N SEFFNER AVE','NA','MARION','OH',
              '43302','7402443161','','joeketcham@gmail.com','Our best customer yet!', LAST_INSERT_ID());
COMMIT;
SELECT * from CUSTOMER;

BEGIN;

INSERT INTO INVOICE(DROPOFF, READY, NOTE, PAID, CUSTOMER_ID)
VALUES (STR_TO_DATE('02-13-2016 13:00:00', '%m-%d-%Y %H:%i:%s'),
        STR_TO_DATE('02-15-2016 09:00:00', '%m-%d-%Y %H:%i:%s'),
        'ZIPPER IS NIKEL', TRUE, 1);
INSERT INTO ITEM_LINE(ITEM_CATEGORY, ITEM, PRICE_OVERRIDE, QUANTITY, PRICE,
                      INVOICE_ID)
VALUES ('MEN DRESS', 'SLACKS',FALSE,1,'14.95', LAST_INSERT_ID());
INSERT INTO ITEM_LINE(ITEM_CATEGORY, ITEM, PRICE_OVERRIDE, QUANTITY, PRICE,
                      INVOICE_ID)
VALUES ('WOMEN DRESS', 'SLACKS',FALSE,1,'18.95', LAST_INSERT_ID());
COMMIT;

SELECT SUM(PRICE) FROM ITEM_LINE WHERE INVOICE_ID = 3;
SELECT SUM(QUANTITY) FROM ITEM_LINE WHERE INVOICE_ID = 3;
SELECT * FROM ITEM_LINE WHERE INVOICE_ID = 2;
INSERT INTO ITEM_LINE(ITEM_CATEGORY, ITEM, PRICE_OVERRIDE, QUANTITY, PRICE,
                      INVOICE_ID)
VALUES ('WOMEN DRESS', 'SLACKS',FALSE,1,'25.99', 3);
SELECT * FROM ITEM_LINE;
SELECT * FROM INVOICE;

SHOW TRIGGERS;
SELECT * FROM ITEM_LINE;
SELECT * FROM CUSTOMER;
SELECT * FROM CUSTOMER_TYPE;
SELECT * FROM INVOICE;
-- INNER JOIN ITEM_LINE ON INVOICE.ID = ITEM_LINE.INVOICE_ID;

SELECT * FROM ITEM_LINE;
SELECT SUM(PRICE), ITEM FROM ITEM_LINE WHERE INVOICE_ID = 2 GROUP BY ITEM ;

UPDATE INVOICE
  INNER JOIN ITEM_LINE ON INVOICE.ID = ITEM_LINE.INVOICE_ID
SET TOTAL_PRICE = (SELECT SUM(PRICE) FROM ITEM_LINE
WHERE INVOICE_ID = 2 GROUP BY ITEM)
WHERE INVOICE.ID = 2;

UPDATE INVOICE
SET TOTAL_QUANTITY = (SELECT SUM(QUANTITY) FROM ITEM_LINE
WHERE INVOICE_ID = 2 GROUP BY ITEM)
WHERE INVOICE.ID  = 2;

SELECT * FROM INVOICE;
select * from CUSTOMER;
/*
https://www.youtube.com/watch?v=BeG4IHFjqVg

triggers are tied or attached to tables!

CREATE TRIGGER trigger_name trigger_time trigger_event
on tbl_name
  FOR EACH NEW trigger_statement;

1. trigger_time = BEFORE or AFTER
2. trigger_event = INSERT,UPDATE,DELETE
3. trigger_statement = Standard mysql statement
  a. Note begin/end used for multi statement


CREATE TRIGGER trigger_name trigger_timing trigger_event ON table_name
FOR EACH ROW sql_statement;

DELIMITER |
  CREATE TRIGGER trigger_name trigger_timing trigger_event ON table_name
  FOR EACH ROW BEGIN
    sql_statement1;
    sql_statement2;
    sql_statementn;
  END; |
DELIMITER ;

SELECT SUM(PRICE) FROM ITEM_LINE WHERE INVOICE_ID = 2;
SELECT SUM(PRICE), ITEM FROM ITEM_LINE WHERE INVOICE_ID = 2 GROUP BY ITEM ;
*/

DELIMITER //
CREATE TRIGGER UPDATE_INVOICE_QTY_PRICE AFTER INSERT
  ON ITEM_LINE FOR EACH ROW BEGIN
  UPDATE INVOICE
  SET TOTAL_QUANTITY = (SELECT SUM(QUANTITY) FROM ITEM_LINE WHERE INVOICE_ID = NEW.INVOICE_ID)
  WHERE INVOICE.ID = NEW.INVOICE_ID;
  UPDATE INVOICE
  SET TOTAL_PRICE = (SELECT SUM(PRICE) FROM ITEM_LINE WHERE INVOICE_ID = NEW.INVOICE_ID)
  WHERE INVOICE.ID = NEW.INVOICE_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER UPDATE_INVOICE_QTY_PRICE_UPDATEITEM AFTER UPDATE
  ON ITEM_LINE FOR EACH ROW BEGIN
  UPDATE INVOICE
  SET TOTAL_QUANTITY = (SELECT SUM(QUANTITY) FROM ITEM_LINE WHERE INVOICE_ID = NEW.INVOICE_ID)
  WHERE INVOICE.ID = NEW.INVOICE_ID;
  UPDATE INVOICE
  SET TOTAL_PRICE = (SELECT SUM(PRICE) FROM ITEM_LINE WHERE INVOICE_ID = NEW.INVOICE_ID)
  WHERE INVOICE.ID = NEW.INVOICE_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER DELETE_INVOICE_QTY_PRICE_DELETEITEM AFTER DELETE
  ON ITEM_LINE FOR EACH ROW BEGIN
  UPDATE INVOICE
  SET TOTAL_QUANTITY = (SELECT SUM(QUANTITY) FROM ITEM_LINE WHERE INVOICE_ID = old.INVOICE_ID)
  WHERE INVOICE.ID = old.INVOICE_ID;
  UPDATE INVOICE
  SET TOTAL_PRICE = (SELECT SUM(PRICE) FROM ITEM_LINE WHERE INVOICE_ID = old.INVOICE_ID)
  WHERE INVOICE.ID = old.INVOICE_ID;
END;
//
DELIMITER ;

